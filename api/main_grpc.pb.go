// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SimpleServicesClient is the client API for SimpleServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServicesClient interface {
	GetDeviceInterfaces(ctx context.Context, in *RequestR, opts ...grpc.CallOption) (*ResponseR, error)
	GetStreaming(ctx context.Context, in *RequestR, opts ...grpc.CallOption) (SimpleServices_GetStreamingClient, error)
}

type simpleServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServicesClient(cc grpc.ClientConnInterface) SimpleServicesClient {
	return &simpleServicesClient{cc}
}

func (c *simpleServicesClient) GetDeviceInterfaces(ctx context.Context, in *RequestR, opts ...grpc.CallOption) (*ResponseR, error) {
	out := new(ResponseR)
	err := c.cc.Invoke(ctx, "/message.SimpleServices/GetDeviceInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServicesClient) GetStreaming(ctx context.Context, in *RequestR, opts ...grpc.CallOption) (SimpleServices_GetStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleServices_serviceDesc.Streams[0], "/message.SimpleServices/GetStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServicesGetStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleServices_GetStreamingClient interface {
	Recv() (*ResponseNames, error)
	grpc.ClientStream
}

type simpleServicesGetStreamingClient struct {
	grpc.ClientStream
}

func (x *simpleServicesGetStreamingClient) Recv() (*ResponseNames, error) {
	m := new(ResponseNames)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServicesServer is the server API for SimpleServices service.
// All implementations must embed UnimplementedSimpleServicesServer
// for forward compatibility
type SimpleServicesServer interface {
	GetDeviceInterfaces(context.Context, *RequestR) (*ResponseR, error)
	GetStreaming(*RequestR, SimpleServices_GetStreamingServer) error
	mustEmbedUnimplementedSimpleServicesServer()
}

// UnimplementedSimpleServicesServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServicesServer struct {
}

func (UnimplementedSimpleServicesServer) GetDeviceInterfaces(context.Context, *RequestR) (*ResponseR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInterfaces not implemented")
}
func (UnimplementedSimpleServicesServer) GetStreaming(*RequestR, SimpleServices_GetStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreaming not implemented")
}
func (UnimplementedSimpleServicesServer) mustEmbedUnimplementedSimpleServicesServer() {}

// UnsafeSimpleServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServicesServer will
// result in compilation errors.
type UnsafeSimpleServicesServer interface {
	mustEmbedUnimplementedSimpleServicesServer()
}

func RegisterSimpleServicesServer(s *grpc.Server, srv SimpleServicesServer) {
	s.RegisterService(&_SimpleServices_serviceDesc, srv)
}

func _SimpleServices_GetDeviceInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServicesServer).GetDeviceInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.SimpleServices/GetDeviceInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServicesServer).GetDeviceInterfaces(ctx, req.(*RequestR))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleServices_GetStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestR)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServicesServer).GetStreaming(m, &simpleServicesGetStreamingServer{stream})
}

type SimpleServices_GetStreamingServer interface {
	Send(*ResponseNames) error
	grpc.ServerStream
}

type simpleServicesGetStreamingServer struct {
	grpc.ServerStream
}

func (x *simpleServicesGetStreamingServer) Send(m *ResponseNames) error {
	return x.ServerStream.SendMsg(m)
}

var _SimpleServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.SimpleServices",
	HandlerType: (*SimpleServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInterfaces",
			Handler:    _SimpleServices_GetDeviceInterfaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreaming",
			Handler:       _SimpleServices_GetStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}
